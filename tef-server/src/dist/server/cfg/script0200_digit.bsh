import org.jpos.iso.*;
import com.bravado.gp.pdv.*;
import net.hairi.Thales.*;
import com.bravado.gp.*;
import com.bravado.util.*;
import com.bravado.tlv.*;

ISOMsg response = new ISOMsg();
response.setPackager(request.getPackager());

logger.info("MENSAGEM 0200 TARJA OU DIGITADA RESPONDER DE 39 = 00 (OK)");

response.setMTI("0210");

String data = ISODate.getDateTime(new Date());
String nsu = "00" + data;   	// monto um campo de 12 dígitos com valores crescentes
String failureResponseCode = "01";
String errormsg="";
String amount = request.getString(4);
String bandeira, nroParcelas = null;

// ========= inicia a montagem da msg de resposta, rebatendo os campos "echo"

int[] fieldsToCopy = new int[] {
    3,  // processing code(debit or credit)
    4,  // amount, transaction
	7,  // transmission date and time
    11, // system trace audit number
    12, // date , local transaction
	13, // hora local
    41, // terminal ID
    42, // card aceptor ID
	49
};

ISOMsgUtil.copyFields(request, response, fieldsToCopy);
	
response.set(127, nsu);         // DE 127 = NSU (vai no comprovante, apos "CV:")

// ==================== Verifica se existem todos os campos obrigatorios:

int[] mandatoryFields = new int[] {
	3,  // processing code(debit or credit)
    4,  // amount, transaction
	7,  // transmission  date
    11, // system trace audit number
    12, // date , local transaction
	13, // hora local
	22, // modo de entrada (chip, tarja, digitada)
    41, // terminal ID
    42, // card aceptor ID
    48, // dados adicionais - pelo menos tag 3
	49,
	61, // tags 1, 5, 6, 7
	126 // pelo menos tag 5
};	

String mandatory = ISOMsgUtil.verifyMandatoryFields(request, mandatoryFields);

if (mandatory != "") {
	errormsg = "DE(s) " + mandatory + ":@ campos obrigatorios ausentes!";
}
else {
	logger.info(" ====== TODOS OS CAMPOS OBRIGATORIOS ESTAO PRESENTES ====== ");

	Random random = new Random (System.currentTimeMillis());	// gerar DE 38 aleatoriamente (nro de autorizacao) - "AUTO: "
	String autho = Integer.toString(Math.abs(random.nextInt()) % 1000000);
	response.set (38, autho);
	
	response.set (39, "00");
	
	byte[] additionalData = request.getBytes(48);
	logger.info("ADDITIONAL DATA (DE 48): " + additionalData);
	String fourLast="************1111";
	
		AdditionalDataAnalyser additionalDataAnalyser = new AdditionalDataAnalyser(additionalData);
		logger.info("criptogramaPan " + additionalDataAnalyser.getCriptogramaPan());
		String campoCriptografado = additionalDataAnalyser.getCampoCriptografado();
		String panCriptografado = additionalDataAnalyser.getPanCriptografado();
	
		logger.info("panCriptografado " + panCriptografado);
	
		String version = null, vendor = null;
			
		if (panCriptografado == null ) {
	   		errormsg = "Bit 48.5 (PAN criptografado):@ campo obrigatorio ausente!";
		}
		else if (panCriptografado.length() != 32) {
			errormsg = "PAN criptografado: " + panCriptografado.length() + ": tamanho invalido!";
		}
		else {
			CustomTLVList tlvList = new CustomTLVList();
			byte[] genericData61 = request.getBytes(61);
			tlvList.unpack(genericData61);
			
			CustomTLVMsg tag001 = tlvList.find(1);
			CustomTLVMsg tag005 = tlvList.find(5);
			
			if (! (tag001 == null)) {
			    version = new String(tag001.getValue());
			    //System.out.println(version);
				logger.info("DE 61 tag 1: " + version);
				version=version.substring(2,6);
			
				if (! (tag005 == null) ) {
					vendor = new String(tag005.getValue());
					vendor = vendor.trim();
					//System.out.println(vendor);
					logger.info("DE 61 tag 5: " + vendor);

					if ( ! panCriptografado.substring(16,32).equals("0000000000000000") ) {
						errormsg = "PAN criptografado invalido! Dados RFU devem conter zeros.";
					}
				}
				else {
					if (version.equals("0102")) {
					    errormsg = "DE 61 tag 5:@ campo obrigatorio nao recebido!";
					}
				}
			}
			else {
			    errormsg = "DE 61 tag 1: campo obrigatorio nao recebido!";
			}
		}

		String zekLmk;
		if (errormsg == "") {    	// recebeu os dados necess�rios		
				logger.warn(request.getString(42) + ":" + request.getString(41) + ": Version: " + version + "   -   Vendor (only v.102): " + vendor);
				try {
					zekLmk = PinpadUtil.findZekKey(config, version, vendor);
				}
				catch(Exception e) {
					errormsg=e;
				}
		}
		if (errormsg == "") {    					
				logger.info("Version: " + version + " Vendor: " + vendor + " => ZMK: " + zekLmk);
				
				String zekDESMode = config.get("hsm-zek-des-mode");
				
				String clearPANData;
				try {
					clearPANData = CryptoUtil.decryptData(hsm, zekDESMode, zekLmk, panCriptografado);
				}
				catch (Exception e) {
					errormsg = " *** " + e;
				}
				
				if (errormsg == "") {
					String panData = null;
					if (version.equals("0102")) {
					    panData = clearPANData;
					}
					else {
					    panData = StringUtil.hex2str(clearPANData);
					}
					
					logger.info("panData (aberto) " + panData);
					
					String panPart = CardUtil.stripPadFromPan(panData);
				
					int tam = panPart.length();
					logger.info("PAN part " + panPart + " tam=" + tam);	
				
					if (tam < 6) {
					   errormsg = "PAN criptografado: tamanho inv�lido.";
					}
					else {
						fourLast="******";    // corresponde ao BIN
						for (int i = 4; i < tam; i++) {
							fourLast=fourLast + "*";
						}
						
						fourLast = fourLast + panPart.substring((tam-4),tam);	
						
						logger.info("4 ultimos digitos: " + fourLast);
					
						String trackData;
						
						if (request.hasField(35)) {
							trackData = request.getString(35);
							logger.info("TrackData 35: " + trackData);
						}
						else if (request.hasField(2)) {
							trackData = request.getString(2); 
							logger.info("TrackData 2: " + trackData);
						}
						else {
							errormsg = "Mensagem deve conter Bit 2 ou 35!";
						}
						
						if (errormsg == "") {    	// recebeu BIN	
					
							String bin = CardUtil.extractBinFromTrack(trackData);
						
							logger.info("BIN " + bin);
						
							String primaryAccountNumber = bin + panPart;
							
							bandeira = primaryAccountNumber.substring(0,1);
							if (bandeira.equals("4")) {
								bandeira = "Visa";
								if (request.getString(3).equals("002000"))  {
								    bandeira = "Visa Electron";
								}
							} else if (bandeira.equals("6")) {
								bandeira = "Maestro";
							} else {
								bandeira = "Mastercard";
							}
						
							logger.warn(request.getString(42) + ":" + request.getString(41) + ": PAN " + primaryAccountNumber + "  " + bandeira);
							
							// ----------------- Cupons: ---------------------
							// obter dados sobre parcelamento, para cupons
							
							String func = null;
							CustomTLVList tlvDE48 = new CustomTLVList();
							tlvDE48.unpack(additionalData);
							CustomTLVMsg DE48tag3 = tlvDE48.find(3);    // 1=à vista 2=emissor 3=loja
							CustomTLVMsg DE48tag6 = tlvDE48.find(6);    // nro de parcelas
							if (DE48tag3 != null) 
								func = new String(DE48tag3.getValue());
							
							if (DE48tag6 != null)
								nroParcelas = new String(DE48tag6.getValue());
					
							logger.info(bandeira + "  Funcionalidade: " + func + " nro. parcelas " + nroParcelas);
							
							String dig;
							int i, j;
					        String brancosValor="        ";
					        
							// amount tem 12 digitos, sendo os 2 ultimos, centavos. Procuro o primeiro nao zero,
							// sendo que se for tudo zero, vou ler os 3 ultimos: 0,00 (dai a busca ser ate o 9o. digito)
							for (i=0; i < 9; i++) {
								 j=i+1;
								 dig = amount.substring(i,j);
								 if ( ! dig.equals("0"))
									 break;
								 brancosValor = brancosValor + " ";
							}
							String strValor=amount.substring(i,10) + "," + amount.substring(10,12);
							String tipoVenda;
							String pcode = request.getString(3);
							String cupom;
					
							if (pcode.equals("003000")) {
								logger.trace("Credit amount: " + amount);
					
								tipoVenda= "VENDA CREDITO A VISTA    ";
								if (func.equals("02")) 
									tipoVenda = "VENDA PARCELADO     @EMISSOR EM " + nroParcelas + " PARCELAS    ";
								if (func.equals("03")) 
									tipoVenda = "VENDA PARCELADO     @LOJA EM " + nroParcelas + " PARCELAS    ";
							}
							if (pcode.equals("002000")) {
								logger.trace("Debit amount: " + amount);
							
								tipoVenda= "MAESTRO     @VENDA DEBITO    ";
								if (bandeira.equals("Visa")) 
							       tipoVenda = "VISA ELECTRON   @VENDA DEBITO    ";
							}
					
							cupom = "Nome do Estabelecimento @Av Do Estado 1315 - Bloco 2       SPBR@";
							cupom = cupom + "CNPJ: 01006074/0001-06     1 4399 0000@EC:000006510                          @@";
							cupom = cupom + bandeira + "@" + tipoVenda;
							cupom = cupom + "@" + fourLast + "   @";
							cupom = cupom + data.substring(02,04) + "/" + data.substring(00,02) + "/15        ";   
							cupom = cupom + data.substring(04,06) + ":" + data.substring(6,8); 
							cupom = cupom + "@VALOR APROVADO:" + brancosValor + "R$ " + strValor;
							cupom = cupom + "@@CV:" + nsu + "            AUTO:" + autho;
							//  AC e AID: dados de chip!!!
							cupom = cupom + "@TERM:" + request.getString(41) + "     @";
					
							String cupomCliente = "C@@       " + bandeira + " - Via Cliente        @@" + cupom;
							String cupomEstab  =  "C@@    " + bandeira + " - Via Estabelecimento   @@" + cupom;
					
							// ----------------- Tratamento especial para roteiro de testes: ---------------------
							if (pcode.equals("003000")) {
								if (amount.equals("000000002500")) {
									cupomEstab = cupomEstab + "  TRANSACAO AUTORIZADA MEDIANTE SENHA @";
								}
							}
							if (pcode.equals("002000")) {
								if (amount.equals("000000000100") ) {
									cupomEstab = cupomEstab + "@@---------------------------------@";
									cupomEstab = cupomEstab + "ASSINATURA DO CLIENTE@(Nome do Cliente)@";
								}
								else cupomEstab = cupomEstab + "@  TRANSACAO AUTORIZADA MEDIANTE SENHA @";
							}
							// ------------------------------------------------------------------------------------
					
							response.set(60, cupomCliente);
							response.set(62, cupomEstab);
					}	  // recebeu bin
				}   // sem exce��o ao abrir o PAN
			} 		// PAN criptografado aparentemente OK.
		}  // recebeu DE 61.1 e .5
	}  // recebeu campos obrigat�rios
	
// ================ valida��o de roteiro =================================
if (amount.substring(0,10).equals("0000121314")) {     // valor espec�fico para roteiro de requisitos iniciais
    shell.source("cfg/script_validacao_Req_Ini.bsh");
    logger.info(" VOLTOU DO SCRIPT DE VALIDACAO");
}

// ================ valida��o do roteiro de Requisitos Iniciais =================================

if (amount.substring(0,10).equals("0000121315")) {     // valor espec�fico para roteiro de requisitos iniciais
	String cents=amount.substring(10,12);
	String entry=request.getString(22);

    // ------- todas testam se trx OK (DE 39) -------------------------------------
	if (response.getString(39).equals("00"))
		RImsg = RImsg + "Transacao aprovada: OK";
	else 
		RImsg = RImsg + "Transacao aprovada: NOK";
		
	// ------- Modo de entrada (DE 22) -----------------
	if (cents.equals("25") || cents.equals("27") || cents.equals("29") || cents.equals("31") || cents.equals("33") ) {
		if (entry.equals("011") || entry.equals("791"))   // digitada e fallback dig
			RImsg = RImsg + "\n     Modo de entrada = digitado: OK";
		else
			RImsg = RImsg + "\n     Modo de entrada = digitado: NOK";
	}
	if (cents.equals("13") || cents.equals("15") || cents.equals("17") || cents.equals("19") || cents.equals("21") || cents.equals("23") ) {
		if (entry.equals("021") || entry.equals("801"))   // tarja e fallback tarja
			RImsg = RImsg + "\n     Modo de entrada = tarja: OK";
		else
			RImsg = RImsg + "\n     Modo de entrada = tarja: NOK";
	}
	
	// ------- n�o deve ter dados de chip: --------------	
	if (response.hasField(55))
		RImsg = RImsg + "\n     Dados de chip = ausentes: NOK";
	else 
		RImsg = RImsg + "\n     Dados de chip = ausentes: OK";
			
	// ------- Parcelamento -----------------------------------------------
	
	if (cents.equals("15") || cents.equals("17") || cents.equals("27") || cents.equals("29")) {     // cr�dito  parcelado 
		if (nroParcelas == null)
			RImsg = RImsg +  "\n     Numero de parcelas presente: NOK";
		else 
			RImsg = RImsg +  "\n     Numero de parcelas presente: OK";
	}
	else {   // aa vista
		if (nroParcelas == null)
			RImsg = RImsg +  "\n     Numero de parcelas ausente: OK";
		else 
			RImsg = RImsg +  "\n     Numero de parcelas ausente: NOK";
	}
	
	logger.warn(request.getString(42) + ":" + request.getString(41) + ":\n  RESULT: " + RImsg );
}
// ====================================================================================

	if (errormsg != "") {    
 		logger.warn(request.getString(42) + ":" + request.getString(41) + ":  ********** " + errormsg + " ********* ");
 
 		response.set(39, failureResponseCode);
		response.set(38, null);
		response.set(60, null);
		response.set(62, "D" + errormsg + "#" + errormsg);	
	}
	
	socket.send (response);
