import java.lang.*;
import org.jpos.tlv.*;
import org.jpos.emv.*;

import org.jpos.iso.*;
import com.bravado.gp.pdv.*;
import net.hairi.Thales.*;
import com.bravado.gp.*;
import com.bravado.util.*;

import com.bravado.tlv.*;

logger.info(" >>>>>>> ****** Script 400 - response code = 00 ****** <<<<<<");

String failureResponseCode = "01";
String data = ISODate.getDateTime(new Date());
String nsu = "00" + data;   	// monto um campo de 12 dígitos com valores crescentes
String errormsg="";
String amount = request.getString(4);

//=========== inicia a montagem da msg de resposta, rebatendo os campos "echo"

ISOMsg response = FileReader.readXMLMsg("resources/0410.xml");   

int[] fieldsToCopy = new int[] {
    3,  // processing code(debit or credit)
    4,  // amount, transaction
	7,  // transmission date and time
    11, // system trace audit number
	12, // transaction local date
	13, // transaction local time
    41, // terminal ID
    42, // card aceptor ID
	49, // 
    90  //
};
ISOMsgUtil.copyFields(request, response, fieldsToCopy);

response.set(127, nsu);         // vai no comprovante, apos "CV:"

// ==================== Verifica se existem todos os campos obrigatorios:

int[] mandatoryFields = new int[] {
	3,  // processing code(debit or credit)
    4,  // amount, transaction
	7,  // transmission  date
    11, // system trace audit number
    12, // date , local transaction
	13, // hora local
	22, // modo de entrada (chip, tarja, digitada)
    41, // terminal ID
    42, // card aceptor ID
    48, // dados adicionais - pelo menos tag 3
	49,
	61, // tags 1, 5, 6, 7
	90
};	

//mandatoryFields = ISOMsgUtil.verifyMandatoryFields(request, mandatoryFields);
String mandatory = ISOMsgUtil.verifyMandatoryFields(request, mandatoryFields);

if (mandatory != "") {
	errormsg = "DE(s) " + mandatory + ": @campos obrigatorios ausentes!";
}
else {
	logger.info(" ======= TODOS OS CAMPOS OBRIGATORIOS ESTAO PRESENTES ======= ");
	
	Random random = new Random (System.currentTimeMillis());
	response.set (39, "00");
	
	//-------------- DESCOBRIR A BANDEIRA ----------------------
		String trackData, bin;
		
		if (request.hasField(35)) {   // chip ou tarja
		    trackData = request.getString(35);
			logger.info("TrackData 35: " + trackData);
		}
		else {      // digitada
			trackData = request.getString(2); 
			logger.info("TrackData 2: " + trackData);
		}
		
		if (trackData.equals(null)) {
		   bin = "1234";    // assumo um default, ao inves de parar a msg...   bandeira = Mastercard
		}
	    else {
			bin = CardUtil.extractBinFromTrack(trackData);
		}
		
		logger.info("BIN " + bin);
		String bandeira = bin.substring(0,1);
		if (bandeira.equals("4")) {
			bandeira = "Visa";
			if (request.getString(3).equals("002000"))
			    bandeira = "Visa Electron";
		} 
		else {
			if (bandeira.equals("6")) 
				bandeira = "Maestro";
			else 
				bandeira = "Mastercard";
		}
		logger.info("Bandeira " + bandeira);
		
		// ------------- vou abrir o PAN para pegar os 4 �ltimos d�gitos: -------------------
		
		byte[] additionalData = request.getBytes(48);
		AdditionalDataAnalyser additionalDataAnalyser = new AdditionalDataAnalyser(additionalData);
		logger.info("criptogramaPan " + additionalDataAnalyser.getCriptogramaPan());
		String campoCriptografado = additionalDataAnalyser.getCampoCriptografado();
		String panCriptografado = additionalDataAnalyser.getPanCriptografado();
		
		logger.info("panCriptografado " + panCriptografado);
		String fourLast = "[last-4-digits]";
		
		if (panCriptografado != null) {
			CustomTLVList tlvList = new CustomTLVList();
			byte[] genericData61 = request.getBytes(61);
			tlvList.unpack(genericData61);
			CustomTLVMsg tag001 = tlvList.find(1);
			CustomTLVMsg tag005 = tlvList.find(5);
			
			String version = null, vendor = null;
			
			if (! (tag001 == null)) {
			    version = new String(tag001.getValue());
				logger.info("DE 61 tag 1: " + version);
				version=version.substring(2,6);
			
				if (! (tag005 == null)) {
					vendor = new String(tag005.getValue());
					vendor = vendor.trim();
					logger.info("DE 61 tag 5: " + vendor);

					if ( ! panCriptografado.substring(16,32).equals("0000000000000000") ) 
						errormsg = "PAN criptografado invalido! Dados RFU devem conter zeros.";
				}
				else {
					if (version.equals("0102")) 
					    errormsg = "DE 61 tag 5:@ campo obrigatorio nao recebido!";
				}
			}
			else {
			    errormsg = "DE 61 tag 1: campo obrigatorio nao recebido!";
			}
			
			if (errormsg == "") {
				String zekLmk;
				logger.warn(request.getString(42) + ":" + request.getString(41) + ": Version: " + version + "  -    Vendor (only v.102): " + vendor);
				try {
					zekLmk = PinpadUtil.findZekKey(config, version, vendor);
				}
				catch(Exception e) {
					logger.warn(e);
				}
				logger.info("Version: " + version + "      Vendor: " + vendor + " => ZMK: " + zekLmk);
				
				String zekDESMode = config.get("hsm-zek-des-mode");
				
				String clearPANData = CryptoUtil.decryptData(hsm, zekDESMode, zekLmk, panCriptografado);
				
				String panData = null;
				if (version.equals("0102")) {
				    panData = clearPANData;
				}
				else {
				    panData = StringUtil.hex2str(clearPANData);
				}
				
				logger.info("panData " + panData);               
				
				String panPart = CardUtil.stripPadFromPan(panData);   // **************************************
				
				int tam = panPart.length();
				logger.info("PAN part " + panPart + " tam=" + tam);	
			
				if (tam < 6) {
				   errormsg = "PAN criptografado: tamanho inv�lido.";
				}
				else {
					fourLast="******";    // corresponde ao BIN
					for (int i = 4; i < tam; i++) {
						fourLast=fourLast + "*";
					}
					
					fourLast = fourLast + panPart.substring((tam-4),tam);	
				}

			}
			logger.info("4 ultimos digitos: " + panPart);
		}	
	    //-----------------------------------------------------------
	    
	    // ---------- Obter dados trx original -------------------
	    String nsuorig = request.getString(90).substring(4,10);
	    
		// ----------------- Cupons: ---------------------
		// obter dados sobre parcelamento, para cupons
		
		String func = null, nroParcelas = null;
		CustomTLVList tlvDE48 = new CustomTLVList();
		byte[] additionalData = request.getBytes(48);
	
		tlvDE48.unpack(additionalData);
		CustomTLVMsg DE48tag3 = tlvDE48.find(3);    // 1= a vista 2=emissor 3=loja
		CustomTLVMsg DE48tag6 = tlvDE48.find(6);    // nro de parcelas
		if (DE48tag3 != null) 
			func = new String(DE48tag3.getValue());
		
		if (DE48tag6 != null) 
			nroParcelas = new String(DE48tag6.getValue());
	
		String strValor, dig;
		int i, j;
		String brancosValor = "       ";
		
		// amount tem 12 digitos, sendo os 2 ultimos, centavos. Procuro o primeiro nao zero,
		// sendo que se for tudo zero, vou ler os 3 ultimos: 0,00 (dai a busca ser ate o 9o. digito)
		for (i=0; i < 9; i++) {
			j=i+1;
			dig = amount.substring(i,j);
			if ( ! dig.equals("0"))
				break;
			brancosValor = brancosValor + " ";
		}
		strValor=amount.substring(i,10) + "," + amount.substring(10,12);
	
		String tipoVenda;
		String pcode = request.getString(3);
		String cupom;
	
		if (pcode.equals("003000")) {
			tipoVenda= "ESTORNO CREDITO A VISTA   ";
			if (func != null) {
				tipoVenda= "ESTORNO CREDITO A VISTA    ";
				if (func.equals("02")) 
					tipoVenda = "ESTORNO PARCELADO     @EMISSOR EM " + nroParcelas + " PARCELAS ";
				if (func.equals("03")) 
					tipoVenda = "ESTORNO PARCELADO     @LOJA EM " + nroParcelas + " PARCELAS    ";
			}
		}
		if (pcode.equals("002000") ) {
			tipoVenda= "MAESTRO     @ESTORNO DEBITO    ";
			if (bandeira.equals("Visa")) 
			   tipoVenda = "VISA ELECTRON   @ESTORNO DEBITO    ";
		}
	
		cupom = "Nome do Estabelecimento @Av Do Estado 1315 - Bloco 2       SPBR@";
		cupom = cupom + "CNPJ: 01006074/0001-06     1 4399 0000@EC:000006510                          @@";
		cupom = cupom + bandeira + "@" + tipoVenda;
		cupom = cupom + "@************" + fourLast + "   @";
		cupom = cupom + data.substring(02,04) + "/" + data.substring(00,02) + "/15                       ";   
		cupom = cupom + data.substring(04,06) + ":" + data.substring(6,8); 
		cupom = cupom + "@VALOR CANCELADO:" + brancosValor + "R$ " + strValor;
		cupom = cupom + "@CV:" + nsu + "            AUTO: [auto_orig]";
	
		String cupomCliente = "C@@       " + bandeira + " - Via Cliente        @@" + cupom 
		                       + "@TERM:" + request.getString(41) + "     @";
		
		cupom = cupom + "@@DADOS DA VENDA ORIGINAL ";
		cupom = cupom + "@CV:" + nsuorig + "       AUTO:[auto_orig]";  
		cupom = cupom + "@AC:B212E6C801BAFBE5"  + "@AID:A0000000041010" + "@TERM:" + request.getString(41) + "     @";
		String cupomEstab  =  "C@@    " + bandeira + " - Via Estabelecimento   @@" + cupom;
	
		cupomEstab = cupomEstab + "@@---------------------------------@ASSINATURA DO CLIENTE@(Nome do Cliente)@";
		
		response.set(60, cupomCliente);
		response.set(62, cupomEstab);
	
}   // campos obrigat�rios presentes

// ================ valida��o de roteiro =================================
if (amount.substring(0,10).equals("0000121314")) {     // valor espec�fico para roteiro de requisitos iniciais
    shell.source("cfg/script_validacao_Req_Ini.bsh");
    logger.info(" VOLTOU DO SCRIPT DE VALIDACAO");
}

// ================ valida��o do roteiro de Requisitos Iniciais =================================

if (amount.substring(0,10).equals("0000121315")) {     // valor espec�fico para roteiro de requisitos iniciais
	String cents=amount.substring(10,12);
	String entry=request.getString(22);
    String RImsg="";
    
    // ------- todas testam se trx OK (DE 39) -------------------------------------
	if (response.getString(39).equals("00"))
		RImsg = RImsg + "Transacao aprovada: OK";
	else 
		RImsg = RImsg + "Transacao aprovada: NOK";
		
	// ------- Modo de entrada (DE 22) -----------------
	if (cents.equals("01") || cents.equals("03") || cents.equals("05") || cents.equals("07") || cents.equals("09") || cents.equals("11") ) {
		if (entry.equals("051") )   // chip
			RImsg = RImsg + "\n     Modo de entrada = chip: OK";
		else
			RImsg = RImsg + "\n     Modo de entrada = chip: NOK";
	}
	if (cents.equals("25") || cents.equals("27") || cents.equals("29") || cents.equals("31") || cents.equals("33") ) {
		if (entry.equals("011") || entry.equals("791"))   // digitada e fallback dig
			RImsg = RImsg + "\n     Modo de entrada = digitado: OK";
		else
			RImsg = RImsg + "\n     Modo de entrada = digitado: NOK";
	}
	if (cents.equals("13") || cents.equals("15") || cents.equals("17") || cents.equals("19") || cents.equals("21") || cents.equals("23") ) {
		if (entry.equals("021") || entry.equals("801"))   // tarja e fallback tarja
			RImsg = RImsg + "\n     Modo de entrada = tarja: OK";
		else
			RImsg = RImsg + "\n     Modo de entrada = tarja: NOK";
	}
	
	// ------- estorno n�o tem dados de chip: --------------	
	if (response.hasField(55))
		RImsg = RImsg + "\n     Dados de chip = ausentes: NOK";
	else 
		RImsg = RImsg + "\n     Dados de chip = ausentes: OK";
			
	// ------- Parcelamento -----------------------------------------------
	
	if (cents.equals("03") || cents.equals("05") || cents.equals("15") || cents.equals("17") || cents.equals("27") || cents.equals("29")) {     // cr�dito  parcelado 
		if (nroParcelas == null)
			RImsg = RImsg +  "\n     Numero de parcelas presente: NOK";
		else 
			RImsg = RImsg +  "\n     Numero de parcelas presente: OK";
	}
	else {   // aa vista
		if (nroParcelas == null)
			RImsg = RImsg +  "\n     Numero de parcelas ausente: OK";
		else 
			RImsg = RImsg +  "\n     Numero de parcelas ausente: NOK";
	}
	
	logger.warn(request.getString(42) + ":" + request.getString(41) + ":  RESULT: " + RImsg );
}
// ====================================================================================

if (errormsg != "") {    
 	logger.warn(request.getString(42) + ":" + request.getString(41) + ":  ********** " + errormsg + " ********* ");
 
 	response.set(39, failureResponseCode);
	response.set(60, null);
	response.set(62, "D" + errormsg + "#" + errormsg);	
}

socket.send (response);


